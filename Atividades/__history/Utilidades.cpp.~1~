// ---------------------------------------------------------------------------

#pragma hdrstop

#include "Utilidades.h"
#include "des.h"
#include "Registry.hpp"
#include "math.h"
char PouV;

// Variáveis Utilizadas para Descriptografia com Triple DES.
unsigned char key1[9]; // Chave 1
unsigned char key2[9]; // Chave 2
unsigned char key3[9]; // Chave 3
unsigned char ciphertext[9]; // Senha Criptografada
unsigned char recoverd[9]; // Senha Descriptografada
des3_context context1; // Segredo Triple DES

// ---------------------------------------------------------------------------

#pragma package(smart_init)

// ------------------------------------------------------------------------------
String VersaoArquivo() {
	// Coleta a verão do software para mostrar no form principal
	DWORD dwHandle;
	LPVOID data[1024];
	String file = Application->ExeName;
	String versao = "";
	DWORD size = GetFileVersionInfoSize(AnsiString(file).c_str(), &dwHandle);

	if (size == 0) {
		char szMsg[1024];
		HRESULT hr = HRESULT_FROM_WIN32(GetLastError());
		FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, NULL, hr,
				MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), szMsg, 1024, NULL);
	}

	if (GetFileVersionInfo(AnsiString(file).c_str(), dwHandle, size, data)) {
		UINT uLen;
		VS_FIXEDFILEINFO *lpFfi;
		VerQueryValue(data, ("\\"), (LPVOID *)&lpFfi, &uLen);
		DWORD dwFileVersionMS = lpFfi->dwFileVersionMS;
		DWORD dwFileVersionLS = lpFfi->dwFileVersionLS;
		DWORD dwLeftMost = HIWORD(dwFileVersionMS);
		DWORD dwSecondLeft = LOWORD(dwFileVersionMS);
		DWORD dwSecondRight = HIWORD(dwFileVersionLS);
		versao.printf(String("Versão: %d.%d.%d").c_str(), dwLeftMost, dwSecondLeft,
				dwSecondRight);
	}
	return versao;
}

// ------------------------------------------------------------------------------
int versaoArquivoInt() {
	// Coleta a verão do software para mostrar no form principal
	DWORD dwHandle;
	LPVOID data[1024];
	String file = Application->ExeName;
	String versao = "";
	DWORD size = GetFileVersionInfoSize(AnsiString(file).c_str(), &dwHandle);

	if (GetFileVersionInfo(AnsiString(file).c_str(), dwHandle, size, data)) {
		UINT uLen;
		VS_FIXEDFILEINFO *lpFfi;
		VerQueryValue(data, "\\", (LPVOID *)&lpFfi, &uLen);
		DWORD dwFileVersionMS = lpFfi->dwFileVersionMS;
		DWORD dwLeftMost = HIWORD(dwFileVersionMS);
		DWORD dwSecondLeft = LOWORD(dwFileVersionMS);
		versao.printf(String("%d%d").c_str(), dwLeftMost, dwSecondLeft);
	}
	int versaoInt = versao.ToInt();
	return versaoInt;
}

// ------------------------------------------------------------------------------
void valida_num(char* x) {
	// \x16 ctrl + v
	// \x03 ctrl + c
	// \x18 crtl + x
	char valid[20] = {
		'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ',', '\b', '-', 'e',
		'E', '+', '\x16', '\x03', '\x18'};
	bool val = false;
	for (int i = 0; i < 20; i++) {
		if (*x == valid[i])
			val = true;
	}
	if (val) {
		if (*x == '.' || *x == ',')
			* x = PouV;
	}
	else
		*x = NULL;
}

// ------------------------------------------------------------------------------
char ponto_ou_virgula(void) {
	TRegistry *reg;
	reg = new TRegistry;
	String res;
	char ret;

	try {
		reg->RootKey = HKEY_CURRENT_USER;
		reg->OpenKey("\\Control Panel\\International", false);
		res = reg->ReadString("sDecimal");
	}
	catch (Exception &e) {
		MessageBox("Não foi possível acessar o registro do sistema operacional para"
				" verificar o separador decimal utilizado.", mtError);
	}
	if (res == ".")
		ret = '.';
	else
		ret = ',';
	delete reg;
	return ret;
}
// ------------------------------------------------------------------------------
String NumToSQL(const String Num) {
	String a;
	String Temp;
	for (int i = 1; i <= Num.Length(); i++) {
		a = Num.SubString(i, 1).c_str();
		if (a == "." || a == ",")
			Temp = Temp + ".";
		else
			Temp = Temp + a;
	}
	return Temp;
}

// ------------------------------------------------------------------------------
String SQLToNum(const String Num) {
	String Ponto = ".";
	String Virgula = ",";
	String a;
	String Temp;
	for (int i = 1; i <= Num.Length(); i++) {
		a = Num.SubString(i, 1).c_str();
		if (a == "." || a == ",") {
			if (PouV == ',')
				Temp = Temp + Virgula;
			else
				Temp = Temp + Ponto;
		}
		else
			Temp = Temp + a;
	}
	return Temp;
}

// ------------------------------------------------------------------------------
int Round(double d) {
	return int(floor(d + 0.5));
}

// ------------------------------------------------------------------------------
String Replace(String _full, String _search, String _replace) {
	if (_search == _replace)
		return _full;

	int pos = 0;
	while ((pos = _full.Pos(_search)) != 0)
		_full = _full.SubString(1, pos - 1) + _replace + _full.SubString
				(pos + _search.Length(), _full.Length() - pos);
	return _full;
}

// ------------------------------------------------------------------------------
String getLetras(String texto) {
	String auxiliar = "";
	for (int i = 1; i <= texto.Length(); i++) {
		if (int(*texto.SubString(i, 1).c_str()) >= 65 && int(*texto.SubString(i,
				1).c_str()) <= 90)
			auxiliar += texto.SubString(i, 1);
		else
			break;
	}
	return auxiliar;
}

// ------------------------------------------------------------------------------
String getNumeros(String texto) {
	String auxiliar = "";
	for (int i = 1; i <= texto.Length(); i++)
		if (int(*texto.SubString(i, 1).c_str()) >= 48 && int(*texto.SubString(i,
				1).c_str()) <= 57)
			auxiliar += texto.SubString(i, 1);
	return auxiliar;
}

// ------------------------------------------------------------------------------
bool testarContemString(String _full, String _search) {
	if (_full.Pos(_search) != 0)
		return true;
	else
		return false;
}

// ------------------------------------------------------------------------------
int __fastcall MessageBox(const String Msg, TMsgDlgType DlgType) {
	String caption = "";
	switch (DlgType) {
	case mtCustom:
		return Application->MessageBox(Msg.c_str(),
				String("Nome do executável").c_str(), MB_OK | MB_ICONINFORMATION);
	case mtConfirmation:
		return Application->MessageBox(Msg.c_str(), String("Confirmação").c_str(),
				MB_YESNO | MB_ICONWARNING);
	case mtError:
		return Application->MessageBox(Msg.c_str(), String("Erro").c_str(),
				MB_OK | MB_ICONERROR);
	case mtInformation:
		return Application->MessageBox(Msg.c_str(), String("Informação").c_str(),
				MB_OK | MB_ICONINFORMATION);
	case mtWarning:
		return Application->MessageBox(Msg.c_str(), String("Aviso").c_str(),
				MB_OK | MB_ICONWARNING);
	}
}

// ------------------------------------------------------------------------------
int __fastcall MessageDLG(const AnsiString Msg, TMsgDlgType DlgType,
		TMsgDlgButtons Buttons, int HelpCtx) {
	TForm* __fastcall Dialogo = CreateMessageDialog(Msg, DlgType, Buttons);
	switch (DlgType) {
	case mtCustom:
		Dialogo->Caption = "Nome do executável";
		break;

	case mtConfirmation:
		Dialogo->Caption = "Confirmação";
		break;

	case mtError:
		Dialogo->Caption = "Erro";
		break;

	case mtInformation:
		Dialogo->Caption = "Informação";
		break;

	case mtWarning:
		Dialogo->Caption = "Aviso";
		break;
	}

	const AnsiString OrigIngl[11] =

	{"Help", "OK", "Cancel", "Abort", "Retry",

		"Ignore", "Yes", "No", "All", "NoToAll", "YesToAll"};

	const AnsiString TraduzBR[11] = {
		"Aj&uda", "Ok", "Cancelar", "&Anular", "&Repetir", "&Ignorar", "&Sim",
		"&Não", "&Todos", "Nã&o para todos", "Sim para &todos"};

	for (int i = 0; i < 11; i++) {
		// Identificamos botão a botão
		TButton* Botao = dynamic_cast<TButton*>
				(Dialogo->FindComponent(OrigIngl[i]));
		// inserimos o texto em português nos botões
		if (Botao)
			Botao->Caption = TraduzBR[i];
	}

	// guardamos o valor do botão pressionado
	int valRtrn = Dialogo->ShowModal();

	// deletamos o dialogo
	delete Dialogo;
	// retornamos o valor lido no botão
	return valRtrn;
}

// ------------------------------------------------------------------------------
int __fastcall MessageDLGPos(const AnsiString Msg, TMsgDlgType DlgType,
		TMsgDlgButtons Buttons, int HelpCtx, int X, int Y) {
	TForm* __fastcall Dialogo = CreateMessageDialog(Msg, DlgType, Buttons);

	Dialogo->Left = X;
	Dialogo->Top = Y;

	switch (DlgType) {
	case mtCustom:
		Dialogo->Caption = "Nome do executável";
		break;

	case mtConfirmation:
		Dialogo->Caption = "Confirmação";
		break;

	case mtError:
		Dialogo->Caption = "Erro";
		break;

	case mtInformation:
		Dialogo->Caption = "Informação";
		break;

	case mtWarning:
		Dialogo->Caption = "Aviso";
		break;
	}

	const AnsiString OrigIngl[11] =

	{"Help", "OK", "Cancel", "Abort", "Retry",

		"Ignore", "Yes", "No", "All", "NoToAll", "YesToAll"};

	const AnsiString TraduzBR[11] = {
		"Aj&uda", "Ok", "Cancelar", "&Anular", "&Repetir", "&Ignorar", "&Sim",
		"&Não", "&Todos", "Nã&o para todos", "Sim para &todos"};

	for (int i = 0; i < 11; i++) {
		// Identificamos botão a botão
		TButton* Botao = dynamic_cast<TButton*>
				(Dialogo->FindComponent(OrigIngl[i]));
		// inserimos o texto em português nos botões
		if (Botao)
			Botao->Caption = TraduzBR[i];
	}

	// guardamos o valor do botão pressionado
	int valRtrn = Dialogo->ShowModal();
	// deletamos o dialogo
	delete Dialogo;
	// retornamos o valor lido no botão
	return valRtrn;
}

// ------------------------------------------------------------------------------
void Utilidades::limparSeries(TChart *chart) {
	for (int i = 0; i < chart->SeriesCount(); i++)
		chart->Series[i]->Clear();
	chart->UndoZoom();
}

// ------------------------------------------------------------------------------
void Utilidades::centralizarGridHorizontalmenteVerticalmente(TForm *form,
		TStringGrid *grid, TRect &Rect, int ACol, int ARow) {
	grid->Canvas->TextRect(Rect, Rect.Left + (grid->ColWidths[ACol] / 2) -
			(form->Canvas->TextWidth(grid->Cells[ACol][ARow]) / 2),
			Rect.Top + (grid->RowHeights[ARow] / 2) -
			(form->Canvas->TextHeight(grid->Cells[ACol][ARow]) / 2),
			grid->Cells[ACol][ARow]);
}

// ------------------------------------------------------------------------------
int Utilidades::extrairPortaEnderecoIP(const String enderecoIP) {
	int porta = -1;
	int indiceDoisPontos = 0, contadorLetras = 0;

	indiceDoisPontos = enderecoIP.Pos(":");
	contadorLetras = enderecoIP.Length() - indiceDoisPontos;
	porta = atoi(AnsiString((enderecoIP.SubString(indiceDoisPontos + 1,
			contadorLetras))).c_str());

	return porta;
}

// ------------------------------------------------------------------------------
String Utilidades::extrairEnderecoIP(const String enderecoIP) {
	String ip = "";
	int indiceDoisPontos = 0;

	indiceDoisPontos = enderecoIP.Pos(":");
	while (indiceDoisPontos >= 1 && enderecoIP.SubString(indiceDoisPontos - 1,
			1) == " ") {
		indiceDoisPontos--;
		if (indiceDoisPontos <= 1)
			break;
	}

	ip = enderecoIP.SubString(1, indiceDoisPontos - 1);

	return ip;
}

// ------------------------------------------------------------------------------
void Utilidades::ajustarLarguraColunasGrid(TForm *form, TStringGrid *grid,
		int ACol, int ARow) {
	int tamanhoColuna = 0;
	int INCREMENTO_LARGURA_PIXELS = 10;
	if (form->Canvas->TextWidth(grid->Cells[ACol][ARow]) > tamanhoColuna) {
		tamanhoColuna = form->Canvas->TextWidth(grid->Cells[ACol][ARow]);
		if (grid->ColWidths[ACol] < tamanhoColuna)
			grid->ColWidths[ACol] = tamanhoColuna + INCREMENTO_LARGURA_PIXELS;
	}
}

// ------------------------------------------------------------------------------
void Utilidades::descriptografarDES(String &senha) {
	// Chave 1
	key1[0] = NULL;
	strcat(key1, "tecrn");
	// Chave 2
	key2[0] = NULL;
	strcat(key2, "sisal100");
	// Chave 3
	des3_set_2keys(&context1, key1, key2);
	des3_set_3keys(&context1, key1, key2, key3);

	// Senha Criptografada
	ciphertext[0] = NULL;
	strcat(ciphertext, AnsiString(senha).c_str());

	// Processo de Descriptografia
	senha = "";
	des3_decrypt(&context1, ciphertext, recoverd);
	for (unsigned i = 0; i < strlen(recoverd); i++)
		senha = senha + (char) recoverd[i];
}

// ------------------------------------------------------------------------------
void Utilidades::limparGrid(TStringGrid *grid) {
	for (int i = 1; i < grid->RowCount; i++)
		for (int j = 0; j < grid->ColCount; j++)
			grid->Cells[j][i] = "";
	grid->RowCount = 2;
}

// ------------------------------------------------------------------------------
void Utilidades::copiarRegiaoGridAreaTransferencia(TStringGrid *grid) {
	String conteudo;
	int primeiraColuna = grid->Selection.Left;
	int ultimaColuna = grid->Selection.Right;
	int primeiraLinha = grid->Selection.Top;
	int ultimaLinha = grid->Selection.Bottom;

	for (int linha = primeiraLinha; linha <= ultimaLinha; linha++) {
		for (int coluna = primeiraColuna; coluna <= ultimaColuna; coluna++) {
			if (coluna == ultimaColuna && linha == ultimaLinha)
				conteudo += grid->Cells[coluna][linha];

			if (coluna == ultimaColuna && linha < ultimaLinha)
				conteudo += grid->Cells[coluna][linha] + "\n";

			if (coluna != ultimaColuna)
				conteudo += grid->Cells[coluna][linha] + "\t";
		}
	}

	TClipboard *areaTransferencia = new TClipboard();
	areaTransferencia->Clear();
	areaTransferencia->AsText = conteudo;
	delete areaTransferencia;
	areaTransferencia = NULL;
}
// ---------------------------------------------------------------------------
void Utilidades::salvarStringGrid (TStringGrid *grid, TSaveDialog *saveDialog) {
	FILE *arquivo;
	AnsiString linhaArq;

	if (saveDialog->Execute())
	{
		arquivo = fopen(AnsiString(saveDialog->FileName).c_str(),"w");

		for (int i=0;i<grid->RowCount;i++)
		{
			linhaArq = "";
			for (int j=0;j<grid->ColCount;j++)
				linhaArq = linhaArq + grid->Cells[j][i] + ";";

			fprintf(arquivo,"%s\n",linhaArq);
		}
		fclose(arquivo);
	}
}
// ---------------------------------------------------------------------------
void Utilidades::copiarGridAreaTransferencia(TStringGrid *grid){
	String linhaArq;

	//Percorrer o StringGrid com a função de compor linhaArq em função das
	//linhas do StringGrid. Cada coluna é separada por tabulação.
	for (int i=0;i<grid->RowCount;i++)
	{
		for (int j=0;j<grid->ColCount;j++) //linhas
			linhaArq = linhaArq + grid->Cells[j][i] + ";";

    linhaArq = linhaArq + "\n";
  }

  //Procedimento de área de transferência
  TClipboard *areaTransferencia = new TClipboard();
  areaTransferencia->Clear();
  areaTransferencia->AsText = linhaArq;
	delete areaTransferencia;
	areaTransferencia = NULL;
}
// ------------------------------------------------------------------------------
String Utilidades::interpretarMatching(short valor) {
	char diagnosticoConfianca[2];
	memcpy(diagnosticoConfianca, &valor, 2);

	if (diagnosticoConfianca[0] == 1)
		return diagnosticoConfianca[1];
	else if (diagnosticoConfianca[0] == 2)
		return "Padrão diferente";
	else
		return "Sem carta";
}

// ---------------------------------------------------------------------------
void posicionarForm(TForm *form, TForm *referencia, POSICAO_FORM posicao) {
	switch (posicao) {
	case ESQUERDA_SUPERIOR: {
			form->Left = referencia->Left;
			form->Top = referencia->Top;
		} break;

	case ESQUERDA_INFERIOR: {
			form->Left = referencia->Left;
			form->Top = referencia->Top + referencia->Height - form->Height - 45;
		} break;

	case DIREITA_SUPERIOR: {
			form->Left = referencia->Left + referencia->Width - form->Width - 10;
			form->Top = referencia->Top;
		} break;

	case DIREITA_INFERIOR: {
			form->Left = referencia->Left + referencia->Width - form->Width - 9;
			form->Top = referencia->Top + referencia->Height - form->Height - 45;
		} break;
	}
}

// ---------------------------------------------------------------------------
void posicionarForm(TForm *form, TForm *referencia, POSICAO_FORM posicao,
		ANIMACAO_FORM efeito, int tempoEfeito) {
	posicionarForm(form, referencia, posicao);

	switch (efeito) {
	case FADE:
		AnimateWindow(form->Handle, tempoEfeito, AW_BLEND);
		break;

	case SLIDE:
		AnimateWindow(form->Handle, tempoEfeito, AW_SLIDE);
		break;

	case ATIVA:
		AnimateWindow(form->Handle, tempoEfeito, AW_ACTIVATE);
		break;

	case ESCONDE:
		AnimateWindow(form->Handle, tempoEfeito, AW_HIDE);
		break;

	case CENTRO_FORA:
		AnimateWindow(form->Handle, tempoEfeito, AW_CENTER);
		break;

	case ESQUERDA_DIREITA:
		AnimateWindow(form->Handle, tempoEfeito, AW_HOR_POSITIVE);
		break;

	case DIREITA_ESQUERDA:
		AnimateWindow(form->Handle, tempoEfeito, AW_HOR_NEGATIVE);
		break;

	case CIMA_BAIXO:
		AnimateWindow(form->Handle, tempoEfeito, AW_VER_POSITIVE);
		break;

	case BAIXO_CIMA:
		AnimateWindow(form->Handle, tempoEfeito, AW_VER_NEGATIVE);
		break;
	}
	form->Repaint();
}

// ----------------------------------------------------------------------------
String PontoParaVirgula(const String Num) {
	String a;
	String Temp;

	for (int i = 1; i <= Num.Length() + 1; i++) {
		a = Num.SubString(i, 1).c_str();
		if (a == ".")
			Temp = Temp + ",";
		else
			Temp = Temp + a;
	}
	return Temp;
}

// ---------------------------------------------------------------------------
void dataHoraAtual(String &data, String &hora) {
	data = FormatDateTime("mm/dd/yy", Date());
	hora = TimeToStr(Time());
}
// ---------------------------------------------------------------------------
